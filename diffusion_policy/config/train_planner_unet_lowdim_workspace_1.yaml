defaults:
  - _self_
  - task: pusht_lowdim

name: train_diffusion_unet_lowdim
_target_: diffusion_policy.workspace.train_planner_unet_lowdim_workspace.TrainPlannerUnetLowdimWorkspace

obs_dim: ${task.obs_dim}
action_dim: ${task.action_dim}
keypoint_dim: ${task.keypoint_dim}
task_name: ${task.name}
exp_name: "default"

horizon: 16
n_obs_steps: 2
n_action_steps: 8
n_latency_steps: 0
past_action_visible: False
keypoint_visible_rate: 1.0
obs_as_local_cond: False
obs_as_global_cond: True
pred_action_steps_only: False

# class GaussianDiffusion(nn.Module):
#     def __init__(self, model, horizon, observation_dim, action_dim, n_timesteps=1000,
#         loss_type='l1', clip_denoised=False, predict_epsilon=True,
#         action_weight=1.0, loss_discount=1.0, loss_weights=None,
#     ):

# class TemporalUnet(nn.Module):
#     def __init__(
#         self,
#         horizon,
#         transition_dim,
#         cond_dim,
#         dim=32,
#         dim_mults=(1, 2, 4, 8),
#     ):

# class Policy:
#     def __init__(self, diffusion_model, normalizer):
#         self.diffusion_model = diffusion_model
#         self.normalizer = normalizer
#         self.action_dim = normalizer.action_dim


policy:
  _target_: diffuser.guides.policies.Policy

  model:
    _target_: diffuser.models.GaussianDiffusion


    horizon: ${horizon}
    transition_dim: ${eval:"${obs_dim} + ${action_dim}"}
    cond_dim: ${obs_dim}

  horizon: ${horizon}
  observation_dim: ${obs_dim}
  action_dim: ${action_dim}
  # scheduler.step params
  # predict_epsilon: True

ema:
  # _target_: diffuser.utils.training.EMA
  _target_: diffusion_policy.model.diffusion.ema_model.EMAModel
  update_after_step: 0
  inv_gamma: 1.0
  power: 0.75
  min_value: 0.0
  max_value: 0.9999

dataloader:
  batch_size: 256
  num_workers: 1
  shuffle: True
  pin_memory: True
  persistent_workers: False

val_dataloader:
  batch_size: 256
  num_workers: 1
  shuffle: False
  pin_memory: True
  persistent_workers: False

optimizer:
  _target_: torch.optim.AdamW
  lr: 1.0e-4
  betas: [0.95, 0.999]
  eps: 1.0e-8
  weight_decay: 1.0e-6

training:
  device: "cuda:0"
  seed: 42
  debug: False
  resume: True
  # optimization
  lr_scheduler: cosine
  lr_warmup_steps: 500
  num_epochs: 5000
  gradient_accumulate_every: 1
  use_ema: True
  # training loop control
  # in epochs
  rollout_every: 50
  checkpoint_every: 50
  val_every: 1
  sample_every: 5
  # steps per epoch
  max_train_steps: null
  max_val_steps: null
  # misc
  tqdm_interval_sec: 1.0

logging:
  project: diffusion_planner_debug
  resume: True
  mode: offline
  name: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}
  tags: ["${name}", "${task_name}", "${exp_name}"]
  id: null
  group: null

checkpoint:
  topk:
    monitor_key: test_mean_score
    mode: max
    k: 5
    format_str: 'epoch={epoch:04d}-test_mean_score={test_mean_score:.3f}.ckpt'
  save_last_ckpt: True
  save_last_snapshot: False

multi_run:
  run_dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  wandb_name_base: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}

hydra:
  job:
    override_dirname: ${name}
  run:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  sweep:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
    subdir: ${hydra.job.num}
